#!/usr/bin/python3

# Extract annotations from a PDF document.
# Adapted from https://stackoverflow.com/a/59832745/12519962

import argparse
import popplerqt5
import PyQt5


def _main():
    parser = argparse.ArgumentParser(
        description="Extract annotations from a PDF document"
    )
    parser.add_argument('filename')
    args = parser.parse_args()

    all_annotations = get_annotations(args.filename)
    for page in all_annotations:
        print()
        print('### ' + page.capitalize())
        for annotation in all_annotations[page]:
            print()
            if 'highlight' in annotation:
                print('  - > ' + annotation['highlight'])
                if 'comment' in annotation:
                    print()
                    print('      ' + annotation['comment'])
            else:
                print('  - ' + annotation['comment'])


def get_annotations(filepath):
    """Extract annotations from a PDF document."""
    doc = popplerqt5.Poppler.Document.load(filepath)

    text_only = (
        popplerqt5.Poppler.CaretAnnotation,
        popplerqt5.Poppler.TextAnnotation,
    )
    highlight = popplerqt5.Poppler.HighlightAnnotation

    annotations = {}
    for i in range(doc.numPages()):
        page = doc.page(i)
        pwidth = page.pageSize().width()
        pheight = page.pageSize().height()

        page_annots = []
        for annotation in page.annotations():
            if isinstance(annotation, text_only):
                comment = annotation.contents()
                if comment:
                    page_annots.append({'comment': comment})

            elif isinstance(annotation, highlight):
                # Extract text under highlight.
                # https://stackoverflow.com/a/23367480/12519962
                text_highlighted = ''
                quads = annotation.highlightQuads()
                for quad in quads:
                    qtrect = PyQt5.QtCore.QRectF()
                    qtrect.setCoords(
                        quad.points[0].x() * pwidth,
                        quad.points[0].y() * pheight,
                        quad.points[2].x() * pwidth,
                        quad.points[2].y() * pheight
                    )
                    line_highlighted = page.text(qtrect)
                    if line_highlighted.endswith('-'):
                        text_highlighted += line_highlighted.rstrip('-')
                    else:
                        text_highlighted += f"{line_highlighted} "

                comment = annotation.contents()
                if comment:
                    page_annots.append(
                        {
                            'comment': comment,
                            'highlight': text_highlighted,
                        }
                    )
                else:
                    page_annots.append({'highlight': text_highlighted})

            else:
                # Skip non-text annotations like links.
                continue

        if page_annots:
            annotations[f"page {i+1}"] = page_annots

    return annotations


if __name__ == '__main__':
    _main()
